Namespace(wandb=False, batch_size=512, epochs=1000)
{'epochs': 1000, 'batch_size': 512, 'learning_rate': 0.001, 'n_hidden_unit_list': [20, 20]}
Data Size: 20640, Input Shape: torch.Size([20640, 8]), Target Shape: torch.Size([20640, 1])
16512 4128
################################################## 1
Epoch 100, Training loss 0.5225, Validation loss 0.5455
Epoch 200, Training loss 0.4938, Validation loss 0.5206
Epoch 300, Training loss 0.4737, Validation loss 0.4991
Epoch 400, Training loss 0.4610, Validation loss 0.4822
Epoch 500, Training loss 0.4495, Validation loss 0.4694
Epoch 600, Training loss 0.4423, Validation loss 0.4595
Epoch 700, Training loss 0.4302, Validation loss 0.4515
Epoch 800, Training loss 0.4290, Validation loss 0.4448
Epoch 900, Training loss 0.4204, Validation loss 0.4393
Epoch 1000, Training loss 0.4127, Validation loss 0.4345
C:\Users\user\git-directory\link_dl\_02_homeworks\homework_2
C:\Users\user\AppData\Local\Temp\ipykernel_33308\2469457233.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  all_df["alone"].fillna(0, inplace=True)
C:\Users\user\AppData\Local\Temp\ipykernel_33308\864621257.py:13: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  all_df["Embarked"].fillna("missing", inplace=True)
C:\Users\user\git-directory\link_dl !!!!!!!
